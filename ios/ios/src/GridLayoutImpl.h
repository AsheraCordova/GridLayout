//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\IOSAndroidXGridlayoutPlugin\src\main\java\com\ashera\gridlayout\GridLayoutImpl.java
//

#import <Foundation/Foundation.h>
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_GridLayoutImpl")
#ifdef RESTRICT_GridLayoutImpl
#define INCLUDE_ALL_GridLayoutImpl 0
#else
#define INCLUDE_ALL_GridLayoutImpl 1
#endif
#undef RESTRICT_GridLayoutImpl

#if !defined (ASGridLayoutImpl_) && (INCLUDE_ALL_GridLayoutImpl || defined(INCLUDE_ASGridLayoutImpl))
#define ASGridLayoutImpl_

#define RESTRICT_BaseHasWidgets 1
#define INCLUDE_ASBaseHasWidgets 1
#include "BaseHasWidgets.h"

@class ADXGridLayout_Alignment;
@class ADXGridLayout_Spec;
@class ASWidgetAttribute;
@class ASWidgetAttributeMap;
@class IOSClass;
@class JavaLangBoolean;
@class JavaLangFloat;
@class JavaLangInteger;
@class NSString;
@protocol ASIFragment;
@protocol ASILifeCycleDecorator;
@protocol ASIWidget;
@protocol JavaUtilMap;

@interface ASGridLayoutImpl : ASBaseHasWidgets
@property id uiView;

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithNSString:(NSString *)localname;

- (instancetype)initWithNSString:(NSString *)groupName
                    withNSString:(NSString *)localname;

- (void)addWithASIWidget:(id<ASIWidget>)w
                 withInt:(int32_t)index;

- (id)asNativeWidget;

- (id)asWidget;

- (bool)checkIosVersionWithNSString:(NSString *)v;

- (int32_t)convertStringTointWithNSString:(NSString *)str;

- (void)createWithASIFragment:(id<ASIFragment>)fragment
              withJavaUtilMap:(id<JavaUtilMap>)params;

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
              withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator;

- (id)getChildAttributeWithASIWidget:(id<ASIWidget>)w
               withASWidgetAttribute:(ASWidgetAttribute *)key;

- (ADXGridLayout_Spec *)getSpecWithASIWidget:(id<ASIWidget>)w
                    withASWidgetAttributeMap:(ASWidgetAttributeMap *)attributes
                                withNSString:(NSString *)columnRow;

- (ADXGridLayout_Spec *)getSpecWithNSString:(NSString *)str;

- (IOSClass *)getViewClass;

- (void)invalidate;

- (void)loadAttributesWithNSString:(NSString *)localName;

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params;

- (id<ASIWidget>)newInstance OBJC_METHOD_FAMILY_NONE;

- (bool)removeWithInt:(int32_t)index;

- (bool)removeWithASIWidget:(id<ASIWidget>)w;

- (void)requestLayout;

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue
                withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator;

- (void)setChildAttributeWithASIWidget:(id<ASIWidget>)w
                 withASWidgetAttribute:(ASWidgetAttribute *)key
                          withNSString:(NSString *)strValue
                                withId:(id)objValue;

- (void)setIdWithNSString:(NSString *)id_;

- (void)setVisibleWithBoolean:(bool)b;

#pragma mark Package-Private

- (ADXGridLayout_Alignment *)getAlignmentWithInt:(int32_t)gravity
                                     withBoolean:(bool)horizontal;

@end

J2OBJC_EMPTY_STATIC_INIT(ASGridLayoutImpl)

inline NSString *ASGridLayoutImpl_get_LOCAL_NAME(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ASGridLayoutImpl_LOCAL_NAME;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASGridLayoutImpl, LOCAL_NAME, NSString *)

inline NSString *ASGridLayoutImpl_get_GROUP_NAME(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ASGridLayoutImpl_GROUP_NAME;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASGridLayoutImpl, GROUP_NAME, NSString *)

inline int32_t ASGridLayoutImpl_get_UNDEFINED(void);
#define ASGridLayoutImpl_UNDEFINED ((int32_t) 0x80000000)
J2OBJC_STATIC_FIELD_CONSTANT(ASGridLayoutImpl, UNDEFINED, int32_t)

inline int32_t ASGridLayoutImpl_get_DEFAULT_COLUMN(void);
#define ASGridLayoutImpl_DEFAULT_COLUMN ((int32_t) 0x80000000)
J2OBJC_STATIC_FIELD_CONSTANT(ASGridLayoutImpl, DEFAULT_COLUMN, int32_t)

inline int32_t ASGridLayoutImpl_get_DEFAULT_SPAN_SIZE(void);
#define ASGridLayoutImpl_DEFAULT_SPAN_SIZE 1
J2OBJC_STATIC_FIELD_CONSTANT(ASGridLayoutImpl, DEFAULT_SPAN_SIZE, int32_t)

inline float ASGridLayoutImpl_get_DEFAULT_WEIGHT(void);
#define ASGridLayoutImpl_DEFAULT_WEIGHT 0.0f
J2OBJC_STATIC_FIELD_CONSTANT(ASGridLayoutImpl, DEFAULT_WEIGHT, float)

inline int32_t ASGridLayoutImpl_get_DEFAULT_GRAVITY(void);
#define ASGridLayoutImpl_DEFAULT_GRAVITY 0
J2OBJC_STATIC_FIELD_CONSTANT(ASGridLayoutImpl, DEFAULT_GRAVITY, int32_t)

FOUNDATION_EXPORT void ASGridLayoutImpl_init(ASGridLayoutImpl *self);

FOUNDATION_EXPORT ASGridLayoutImpl *new_ASGridLayoutImpl_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ASGridLayoutImpl *create_ASGridLayoutImpl_init(void);

FOUNDATION_EXPORT void ASGridLayoutImpl_initWithNSString_(ASGridLayoutImpl *self, NSString *localname);

FOUNDATION_EXPORT ASGridLayoutImpl *new_ASGridLayoutImpl_initWithNSString_(NSString *localname) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ASGridLayoutImpl *create_ASGridLayoutImpl_initWithNSString_(NSString *localname);

FOUNDATION_EXPORT void ASGridLayoutImpl_initWithNSString_withNSString_(ASGridLayoutImpl *self, NSString *groupName, NSString *localname);

FOUNDATION_EXPORT ASGridLayoutImpl *new_ASGridLayoutImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ASGridLayoutImpl *create_ASGridLayoutImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname);

J2OBJC_TYPE_LITERAL_HEADER(ASGridLayoutImpl)

@compatibility_alias ComAsheraGridlayoutGridLayoutImpl ASGridLayoutImpl;


#endif

#if !defined (ASGridLayoutImpl_AlignmentMode_) && (INCLUDE_ALL_GridLayoutImpl || defined(INCLUDE_ASGridLayoutImpl_AlignmentMode))
#define ASGridLayoutImpl_AlignmentMode_

#define RESTRICT_AbstractEnumToIntConverter 1
#define INCLUDE_ASAbstractEnumToIntConverter 1
#include "AbstractEnumToIntConverter.h"

@class JavaLangInteger;
@protocol JavaUtilMap;

@interface ASGridLayoutImpl_AlignmentMode : ASAbstractEnumToIntConverter

#pragma mark Public

- (JavaLangInteger *)getDefault;

- (id<JavaUtilMap>)getMapping;

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ASGridLayoutImpl_AlignmentMode)

FOUNDATION_EXPORT void ASGridLayoutImpl_AlignmentMode_init(ASGridLayoutImpl_AlignmentMode *self);

FOUNDATION_EXPORT ASGridLayoutImpl_AlignmentMode *new_ASGridLayoutImpl_AlignmentMode_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ASGridLayoutImpl_AlignmentMode *create_ASGridLayoutImpl_AlignmentMode_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ASGridLayoutImpl_AlignmentMode)


#endif

#if !defined (ASGridLayoutImpl_Orientation_) && (INCLUDE_ALL_GridLayoutImpl || defined(INCLUDE_ASGridLayoutImpl_Orientation))
#define ASGridLayoutImpl_Orientation_

#define RESTRICT_AbstractEnumToIntConverter 1
#define INCLUDE_ASAbstractEnumToIntConverter 1
#include "AbstractEnumToIntConverter.h"

@class JavaLangInteger;
@protocol JavaUtilMap;

@interface ASGridLayoutImpl_Orientation : ASAbstractEnumToIntConverter

#pragma mark Public

- (JavaLangInteger *)getDefault;

- (id<JavaUtilMap>)getMapping;

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ASGridLayoutImpl_Orientation)

FOUNDATION_EXPORT void ASGridLayoutImpl_Orientation_init(ASGridLayoutImpl_Orientation *self);

FOUNDATION_EXPORT ASGridLayoutImpl_Orientation *new_ASGridLayoutImpl_Orientation_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ASGridLayoutImpl_Orientation *create_ASGridLayoutImpl_Orientation_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ASGridLayoutImpl_Orientation)


#endif

#if !defined (ASGridLayoutImpl_GridLayoutExt_) && (INCLUDE_ALL_GridLayoutImpl || defined(INCLUDE_ASGridLayoutImpl_GridLayoutExt))
#define ASGridLayoutImpl_GridLayoutExt_

#define RESTRICT_GridLayout 1
#define INCLUDE_ADXGridLayout 1
#include "GridLayout.h"

#define RESTRICT_ILifeCycleDecorator 1
#define INCLUDE_ASILifeCycleDecorator 1
#include "ILifeCycleDecorator.h"

#define RESTRICT_IMaxDimension 1
#define INCLUDE_ASIMaxDimension 1
#include "IMaxDimension.h"

@class ADRect;
@class ADView;
@class ASGridLayoutImpl;
@class ASWidgetAttribute;
@class IOSIntArray;
@class IOSObjectArray;
@class JavaLangBoolean;
@class JavaLangInteger;
@class NSString;
@protocol ASIWidget;
@protocol JavaUtilList;

@interface ASGridLayoutImpl_GridLayoutExt : ADXGridLayout < ASILifeCycleDecorator, ASIMaxDimension >

#pragma mark Public

- (instancetype)initWithASGridLayoutImpl:(ASGridLayoutImpl *)outer$;

- (void)drawableStateChanged;

- (void)endViewTransitionWithADView:(ADView *)view;

- (void)executeWithNSString:(NSString *)method
          withNSObjectArray:(IOSObjectArray *)canvas;

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute;

- (void)getLocationOnScreenWithIntArray:(IOSIntArray *)appScreenLocation;

- (int32_t)getMaxHeight;

- (int32_t)getMaxWidth;

- (id<JavaUtilList>)getMethods;

- (id<ASIWidget>)getWidget;

- (void)getWindowVisibleDisplayFrameWithADRect:(ADRect *)displayFrame;

- (ADView *)inflateViewWithNSString:(NSString *)layout;

- (void)initialized OBJC_METHOD_FAMILY_NONE;

- (id<ASILifeCycleDecorator>)newInstanceWithASIWidget:(id<ASIWidget>)widget OBJC_METHOD_FAMILY_NONE;

- (void)offsetLeftAndRightWithInt:(int32_t)offset;

- (void)offsetTopAndBottomWithInt:(int32_t)offset;

- (void)onMeasureWithInt:(int32_t)widthMeasureSpec
                 withInt:(int32_t)heightMeasureSpec;

- (void)remeasure;

- (void)removeFromParent;

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue;

- (void)setMaxHeightWithInt:(int32_t)height;

- (void)setMaxWidthWithInt:(int32_t)width;

- (void)setMyAttributeWithNSString:(NSString *)name
                            withId:(id)value;

- (void)setState0WithId:(id)value;

- (void)setState1WithId:(id)value;

- (void)setState2WithId:(id)value;

- (void)setState3WithId:(id)value;

- (void)setState4WithId:(id)value;

- (void)setVisibilityWithInt:(int32_t)visibility;

- (void)state0;

- (void)state1;

- (void)state2;

- (void)state3;

- (void)state4;

- (void)stateNo;

- (void)stateYes;

- (void)updateMeasuredDimensionWithInt:(int32_t)width
                               withInt:(int32_t)height;

#pragma mark Protected

- (void)onLayoutWithBoolean:(bool)changed
                    withInt:(int32_t)l
                    withInt:(int32_t)t
                    withInt:(int32_t)r
                    withInt:(int32_t)b;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ASGridLayoutImpl_GridLayoutExt)

FOUNDATION_EXPORT void ASGridLayoutImpl_GridLayoutExt_initWithASGridLayoutImpl_(ASGridLayoutImpl_GridLayoutExt *self, ASGridLayoutImpl *outer$);

FOUNDATION_EXPORT ASGridLayoutImpl_GridLayoutExt *new_ASGridLayoutImpl_GridLayoutExt_initWithASGridLayoutImpl_(ASGridLayoutImpl *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ASGridLayoutImpl_GridLayoutExt *create_ASGridLayoutImpl_GridLayoutExt_initWithASGridLayoutImpl_(ASGridLayoutImpl *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ASGridLayoutImpl_GridLayoutExt)


#endif

#pragma pop_macro("INCLUDE_ALL_GridLayoutImpl")
